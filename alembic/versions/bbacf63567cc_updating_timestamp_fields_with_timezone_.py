"""Updating timestamp fields with timezone support, for better data handling accross different regions.

Revision ID: bbacf63567cc
Revises: fbc2b7867037
Create Date: 2025-02-12 15:11:07.730274

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = 'bbacf63567cc'
down_revision: Union[str, None] = 'fbc2b7867037'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    # Define timestamp columns for each table
    table_columns = {
        'users': ['created_at', 'updated_at'],
        'logs': ['timestamp'],
        'user_sessions': ['created_at', 'updated_at', 'expires_at'],
        'otps': ['created_at', 'updated_at', 'expires_at']
    }
    
    # Modify each table's timestamp columns to include timezone
    for table, columns in table_columns.items():
        for column in columns:
            # Modify the column to timestamptz, converting existing data
            op.execute(f'ALTER TABLE {table} ALTER COLUMN {column} TYPE timestamptz USING {column} AT TIME ZONE \'UTC\'')
            
            # Update default value for columns that have it
            if table == 'otps' and column in ['created_at', 'updated_at']:
                op.alter_column(
                    table, column,
                    server_default=sa.text("(NOW() AT TIME ZONE 'UTC')"),
                    type_=sa.DateTime(timezone=True)
                )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    # Define timestamp columns for each table
    table_columns = {
        'users': ['created_at', 'updated_at'],
        'logs': ['timestamp'],
        'user_sessions': ['created_at', 'updated_at', 'expires_at'],
        'otps': ['created_at', 'updated_at', 'expires_at']
    }
    
    # Revert timezone changes for each table
    for table, columns in table_columns.items():
        for column in columns:
            # Convert timestamptz back to timestamp without timezone
            op.execute(f'ALTER TABLE {table} ALTER COLUMN {column} TYPE timestamp USING {column} AT TIME ZONE \'UTC\'')
            
            # Restore original default values
            if table == 'otps' and column in ['created_at', 'updated_at']:
                op.alter_column(
                    table, column,
                    server_default=sa.text("(NOW() AT TIME ZONE 'UTC')::timestamp"),
                    type_=sa.DateTime(timezone=False)
                )
    # ### end Alembic commands ###
