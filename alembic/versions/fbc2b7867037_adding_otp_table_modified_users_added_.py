"""Adding OTP table, Modified users - added two new fields 'created_by' and 'updated_by' and established relationship with OTPs. 

Revision ID: fbc2b7867037
Revises: 1cfd3f79419d
Create Date: 2025-02-07 15:10:52.795009

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = 'fbc2b7867037'
down_revision: Union[str, None] = '1cfd3f79419d'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # 1️⃣ Add new columns to 'users' table
    op.add_column('users', sa.Column('created_by', sa.Integer(), nullable=True))
    op.add_column('users', sa.Column('updated_by', sa.Integer(), nullable=True))

    # 2️⃣ Create the 'otps' table
    op.create_table(
        'otps',
        sa.Column('id', sa.Integer(), primary_key=True, autoincrement=True),
        sa.Column('user_id', sa.Integer(), sa.ForeignKey('users.id', ondelete='CASCADE', onupdate='CASCADE'), nullable=False, index=True),
        sa.Column('email', sa.String(length=255), nullable=False, index=True),
        sa.Column('type', sa.String(length=30), nullable=False, server_default='email_verification'),
        sa.Column('otp', sa.String(length=10), nullable=False),
        sa.Column('is_used', sa.Boolean(), nullable=False, server_default=sa.text('false')),
        sa.Column('attempt_count', sa.Integer(), nullable=False, server_default='0'),
        sa.Column('expires_at', sa.DateTime(timezone=False), nullable=False, index=True),
        sa.Column('created_at', sa.DateTime(timezone=False), server_default=sa.text("(NOW() AT TIME ZONE 'UTC')"), nullable=False),
        sa.Column('updated_at', sa.DateTime(timezone=False), server_default=sa.text("(NOW() AT TIME ZONE 'UTC')"), nullable=False),

        # Indexes for optimized queries
        sa.Index('ix_otps_user_id', 'user_id'),
        sa.Index('ix_otps_email', 'email'),
        sa.Index('ix_otps_expires_at', 'expires_at')
    )

    # 3️⃣ Add foreign key constraints for 'created_by' and 'updated_by' in 'users'
    op.create_foreign_key('fk_users_created_by', 'users', 'users', ['created_by'], ['id'], ondelete='SET NULL')
    op.create_foreign_key('fk_users_updated_by', 'users', 'users', ['updated_by'], ['id'], ondelete='SET NULL')



def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('users',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('users_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('username', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('name', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('email', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('mobile', sa.VARCHAR(length=15), autoincrement=False, nullable=True),
    sa.Column('password', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('role', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('is_active', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('is_blocked', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='users_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_index('ix_users_username', 'users', ['username'], unique=False)
    op.create_index('ix_users_name', 'users', ['name'], unique=False)
    op.create_index('ix_users_email', 'users', ['email'], unique=True)
    op.create_table('logs',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('level', postgresql.ENUM('INFO', 'ERROR', 'SUCCESS', 'WARNING', 'DEBUG', 'CRITICAL', name='loglevel'), autoincrement=False, nullable=False),
    sa.Column('message', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('request_id', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('client_host', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('client_port', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('method', sa.VARCHAR(length=10), autoincrement=False, nullable=True),
    sa.Column('path', sa.VARCHAR(length=2048), autoincrement=False, nullable=True),
    sa.Column('query_params', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('headers', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('status_code', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('error_details', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('stack_trace', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('duration', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('additional_details', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('timestamp', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name='logs_pkey')
    )
    op.create_index('ix_logs_timestamp', 'logs', ['timestamp'], unique=False)
    op.create_index('ix_logs_request_id', 'logs', ['request_id'], unique=False)
    op.create_index('ix_logs_level', 'logs', ['level'], unique=False)
    op.create_table('user_sessions',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('access_token', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('refresh_token', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('oauth_token', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('oauth_provider', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('user_agent', sa.VARCHAR(length=300), autoincrement=False, nullable=False),
    sa.Column('ip_address', sa.VARCHAR(length=45), autoincrement=False, nullable=False),
    sa.Column('device_type', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('location', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('login_attempts', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('expires_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='user_sessions_user_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='user_sessions_pkey')
    )
    op.create_index('ix_user_sessions_user_id', 'user_sessions', ['user_id'], unique=False)
    op.create_index('ix_user_sessions_refresh_token', 'user_sessions', ['refresh_token'], unique=True)
    op.create_index('ix_user_sessions_access_token', 'user_sessions', ['access_token'], unique=True)
    # ### end Alembic commands ###
