services:
    traefik:
        image: traefik:v2.10
        container_name: traefik
        command:
            - --providers.docker=true
            - --providers.docker.exposedbydefault=false
            - --entrypoints.web.address=:80
            # Production HTTPS
            - --entrypoints.websecure.address=:443
            - --entrypoints.websecure.http.tls=true
            - --entrypoints.web.http.redirections.entrypoint.to=websecure
            - --entrypoints.web.http.redirections.entrypoint.scheme=https
            - --certificatesresolvers.le.acme.email=imtiaj.dev.kol@gmail.com
            - --certificatesresolvers.le.acme.storage=/letsencrypt/acme.json
            - --certificatesresolvers.le.acme.tlschallenge=true
        ports:
            - "80:80"   # HTTP access for local testing
            - "443:443" # SSL required for production
        deploy:
            resources:
                limits:
                    cpus: '0.2'
                    memory: 256M
        volumes:
            - /var/run/docker.sock:/var/run/docker.sock:ro
            - ./letsencrypt:/letsencrypt # For HTTPS certs
        networks:
            - app_network

    app:
        container_name: fastapi_app
        image: object-vision-backend:1.0.0
        build:
            context: .
            args:
                - BUILD_ENV=${BUILD_ENV:-production}
        restart: unless-stopped
        labels:
            - "traefik.enable=true"
            #   - "traefik.http.routers.app.rule=PathPrefix(`/`)"
            - "traefik.http.routers.app.entrypoints=web" # For HTTP
            - "traefik.http.routers.app.rule=Host(`api-objectvision-ai.linkpc.net`)"
            - "traefik.http.routers.app.entrypoints=websecure" # For HTTPS
            - "traefik.http.routers.app.tls.certresolver=le" # For HTTPS
            - "traefik.http.services.app.loadbalancer.server.port=8000"
            #   - "traefik.http.services.app.loadbalancer.sticky=true"
            #   - "traefik.http.services.app.loadbalancer.sticky.cookie.name=server_id"
            - "traefik.http.routers.app.middlewares=ratelimit@docker"
            - "traefik.http.middlewares.ratelimit.ratelimit.average=100"
            - "traefik.http.middlewares.ratelimit.ratelimit.burst=50"
        # ports:
        #     - 8000:8000
        env_file:
            - .env.production
        environment:
            - UVICORN_WORKERS=1
            - ENVIRONMENT=production
            - REDIS_HOST=redis
            - REDIS_URL=redis://redis:6379/0
            - CELERY_BROKER_URL=redis://redis:6379/1
            - CELERY_BACKEND_URL=redis://redis:6379/2
        depends_on:
            redis:
                condition: service_healthy
        deploy:
            resources:
                limits:
                    cpus: '1.4'
                    memory: 1024M
                reservations:
                    memory: 256M
        healthcheck:
            test: [ "CMD-SHELL", "curl -f http://127.0.0.1:8000/health || exit 1" ]
            interval: 30s
            timeout: 10s
            retries: 3
            start_period: 10s
        volumes:
            # Named Persistence Volumes
            - model_storage:/object-vision-backend/ML_models
            - output_files:/object-vision-backend/output
            - upload_files:/object-vision-backend/uploads

            # Local Temporary Volumes
            - ./logs:/object-vision-backend/logs
            - ./cache/image:/object-vision-backend/cache/image
        networks:
            - app_network

    redis:
        image: redis:7.2-alpine
        container_name: redis
        command: redis-server --appendonly yes
        healthcheck:
            test: [ "CMD", "redis-cli", "ping" ]
            interval: 10s
            timeout: 5s
            retries: 3
            start_period: 20s
        volumes:
            - redis_data:/data
        networks:
            - app_network
        deploy:
            resources:
                limits:
                    cpus: '0.4'
                    memory: 256M

volumes:
    redis_data:
    model_storage:
    output_files:
    upload_files:


networks:
    app_network:
        driver: bridge
        ipam:
            driver: default
            config:
                - subnet: 172.20.0.0/16
