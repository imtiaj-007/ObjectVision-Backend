from decimal import Decimal
from pydantic import BaseModel, Field
from typing import Dict, Any, Optional
from datetime import datetime, timezone
from app.schemas.enums import CurrencyEnum, SubscriptionPlans, PaymentStatus


class BaseOrder(BaseModel):
    user_id: int = Field(..., example=23, description="Customer identifier")
    plan_id: int = Field(..., example=3, description="Subscription plan ID / top-up ID")
    razorpay_order_id: str = Field(
        ..., example="rpay_abcXYZ", description="Razorpay order ID"
    )
    plan_name: SubscriptionPlans = Field(..., example="GOLD", description="Plan name")
    amount: Decimal = Field(..., gt=0, example=100.00, description="Amount to be paid")
    currency: CurrencyEnum = Field(
        default=CurrencyEnum.INR, example="INR", description="Currency of the payment"
    )
    description: Optional[str] = Field(
        None, example="Monthly subscription", description="Payment description"
    )
    promo_code: Optional[str] = Field(
        None, example="WELCOME10", description="Promo code for discounts"
    )


class OrderCreate(BaseOrder):
    pass


class OrderUpdate(BaseModel):
    plan_id: Optional[int] = Field(
        None, example=4, description="Subscription plan ID / top-up ID"
    )
    plan_name: Optional[SubscriptionPlans] = Field(
        None, example="PLATINUM", description="Plan name"
    )
    amount: Optional[Decimal] = Field(
        None, gt=0, example=150.00, description="Updated amount"
    )
    currency: Optional[CurrencyEnum] = Field(
        None, example="USD", description="Updated currency"
    )
    description: Optional[str] = Field(
        None,
        example="Upgraded subscription plan",
        description="Updated payment description",
    )
    status: PaymentStatus = Field(
        ..., description="Current status of the payment order"
    )
    promo_code: Optional[str] = Field(
        None, example="UPGRADE20", description="Updated promo code"
    )
    updated_at: datetime = Field(
        default_factory=lambda: datetime.now(timezone.utc),
        example="2025-02-15T10:07:00Z",
        description="Timestamp of update",
    )


class OrderResponse(BaseOrder):
    id: int = Field(..., example=2, description="Unique Order identifier ID")
    status: PaymentStatus = Field(
        ..., example=PaymentStatus.CAPTURED, description="Current status of the payment order"
    )
    created_at: datetime = Field(..., example="2025-02-15T10:00:00Z")
    updated_at: datetime = Field(..., example="2025-02-15T10:07:00Z")


class PaymentOrderRequest(BaseModel):
    plan_id: int = Field(..., description="The ID of the selected plan")
    amount: float = Field(
        ..., gt=0, description="Amount to be paid, must be greater than 0", example=100
    )
    currency: CurrencyEnum = Field(
        default="INR", description="Currency of the payment", example="INR"
    )
    receipt: Optional[str] = Field(
        None, description="Unique order identifier", example="receipt_2965431258"
    )
    notes: Optional[Dict[str, str]] = Field(
        None, description="Additional information as key-value pairs"
    )
    customer_id: Optional[int] = Field(
        None, description="Customer identifier", example=4
    )
    description: Optional[str] = Field(
        None, description="Payment description", example="Payment for order #12345"
    )
    promo_code: Optional[str] = Field(
        None, description="Promo code for discounts", example="discount10"
    )


class PaymentOrderResponse(PaymentOrderRequest):
    amount_due: float = Field(..., description="Remaining amount to be paid")
    amount_paid: float = Field(..., description="Total amount already paid")
    attempts: int = Field(..., description="Number of payment attempts made")
    created_at: datetime = Field(..., description="Order creation timestamp")
    entity: str = Field(..., description="Entity type, usually 'order'")
    offer_id: Optional[str] = Field(None, description="Offer ID applied to the order")
    status: PaymentStatus = Field(
        ..., description="Current status of the payment order"
    )
    razorpay_order_id: str = Field(
        ..., description="Unique order ID generated by Razorpay"
    )
    plan_name: str = Field(..., description="Name of the selected plan")


class RazorpayPaymentDetails(BaseModel):
    id: str = Field(..., example="pay_29QQoUBi66xm2f")
    entity: str = Field(..., example="payment")
    amount: int = Field(
        ...,
        example=50000,
        description="Amount in the smallest currency unit (e.g., paise for INR)",
    )
    currency: CurrencyEnum = Field(..., example="INR")
    status: PaymentStatus = Field(..., example="captured")
    order_id: str = Field(..., example="order_9A33XWu170gUtm")
    invoice_id: Optional[str] = Field(None, example=None)
    international: bool = Field(..., example=False)
    method: str = Field(..., example="card")
    amount_refunded: int = Field(..., example=0)
    refund_status: Optional[str] = Field(None, example=None)
    captured: bool = Field(..., example=True)
    description: str = Field(..., example="Test Payment")
    card_id: Optional[str] = Field(None, example=None)
    bank: Optional[str] = Field(None, example=None)
    wallet: Optional[str] = Field(None, example=None)
    vpa: str = Field(..., example="user@upi")
    email: str = Field(..., example="user@example.com")
    contact: str = Field(..., example="9876543210")
    notes: Dict[str, Any] = Field(..., example={"note_key": "note_value"})
    fee: int = Field(
        ...,
        example=118,
        description="Payment gateway fee in the smallest currency unit",
    )
    tax: int = Field(
        ..., example=18, description="Tax amount in the smallest currency unit"
    )
    error_code: Optional[str] = Field(None, example=None)
    error_description: Optional[str] = Field(None, example=None)
    error_source: Optional[str] = Field(None, example=None)
    error_step: Optional[str] = Field(None, example=None)
    error_reason: Optional[str] = Field(None, example=None)
    acquirer_data: Any = Field(..., example={})
    created_at: int = Field(
        ...,
        example=1678901234,
        description="Unix timestamp when the payment was created",
    )
    upi: Any = Field(..., example={})


class CustomerRequest(BaseModel):
    name: str = Field(..., description="Customer's full name", example="John Doe")
    email: str = Field(
        ..., description="Customer's email address", example="john.doe@example.com"
    )
    contact: str = Field(
        ..., description="Customer's contact number", example="+919876543210"
    )
    notes: Optional[Dict[str, str]] = Field(
        None, description="Additional customer details as key-value pairs"
    )


class RefundRequest(BaseModel):
    payment_id: str = Field(
        ..., description="Payment identifier to be refunded", example="pay_ABC123"
    )
    amount: Optional[float] = Field(
        None, gt=0, description="Refund amount, must be greater than 0", example=50.00
    )
    notes: Optional[Dict[str, str]] = Field(
        None, description="Additional refund details as key-value pairs"
    )
    speed: str = Field(
        default="normal",
        description="Refund speed, can be 'normal' or 'instant'",
        example="normal",
    )


class PaymentVerificationRequest(BaseModel):
    razorpay_payment_id: str = Field(
        ..., description="Razorpay payment identifier", example="pay_ABC123"
    )
    razorpay_order_id: str = Field(
        ..., description="Razorpay order identifier", example="order_ABC123"
    )
    razorpay_signature: str = Field(
        ...,
        description="Razorpay signature for verification",
        example="abc123signature",
    )


class PaymentHistoryRequest(BaseModel):
    from_date: Optional[datetime] = Field(
        None,
        description="Start date for fetching payment history",
        example="2024-01-01T00:00:00",
    )
    to_date: Optional[datetime] = Field(
        None,
        description="End date for fetching payment history",
        example="2024-01-31T23:59:59",
    )
    count: int = Field(
        default=10,
        ge=1,
        le=100,
        description="Number of records to fetch (1-100)",
        example=10,
    )
    skip: int = Field(
        default=0, ge=0, description="Number of records to skip", example=0
    )


class PaymentWebhookData(BaseModel):
    event: str = Field(
        ...,
        description="Type of event received from webhook",
        example="payment.captured",
    )
    payload: Dict[str, Any] = Field(
        ..., description="Webhook payload containing event data"
    )
    created_at: int = Field(
        ..., description="Timestamp when the event was created", example=1700000000
    )
